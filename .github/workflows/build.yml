name: Build
on: [push, pull_request]

jobs:
  build-gcc-i386:
    name: GCC (i386)
    runs-on: ubuntu-latest
    steps:
      - name: Install RosBE
        run: |
          wget https://svn.reactos.org/storage/vperevertkin/rosbe-ci.tar.zst
          mkdir ${{github.workspace}}/rosbe
          tar -I zstd -xvf rosbe-ci.tar.zst --directory ${{github.workspace}}/rosbe
      - name: Install other packages
        run: sudo apt install ccache
      - uses: actions/checkout@v2
        with:
          path: src
      - name: Set up cache for ccache
        uses: actions/cache@v1
        with:
          path: ccache
          key: ccache-gcc-i386-${{github.sha}}
          restore-keys: |
            ccache-gcc-i386-
      - name: Set ccache settings
        run: |
          echo "::set-env name=CCACHE_BASEDIR::${{github.workspace}}"
          echo "::set-env name=CCACHE_DIR::${{github.workspace}}/ccache"
          echo "::set-env name=CCACHE_MAXSIZE::1G"
          echo "::set-env name=CCACHE_SLOPPINESS::time_macros"
      - name: Configure
        run: |
          mkdir build
          echo 'cd ${{github.workspace}}/build && ${{github.workspace}}/src/configure.sh -DENABLE_CCACHE=1 -DENABLE_ROSTESTS=1 -DENABLE_ROSAPPS=1' > commands
          ${{github.workspace}}/rosbe/RosBE.sh < commands
      - name: Build
        run: |
          echo 'cd ${{github.workspace}}/build && cmake --build . -- -k 0' > commands
          ${{github.workspace}}/rosbe/RosBE.sh < commands
      - name: Generate ISOs
        run: |
          echo 'cd ${{github.workspace}}/build && cmake --build . --target bootcd && cmake --build . --target livecd' > commands
          ${{github.workspace}}/rosbe/RosBE.sh < 'commands'
      - name: Print ccache statistics
        run: ccache -s
      - name: Upload bootcd
        uses: actions/upload-artifact@v1
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/bootcd.iso
      - name: Upload livecd
        uses: actions/upload-artifact@v1
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/livecd.iso

  build-msvc-i386:
    name: MSVC (i386)
    runs-on: windows-latest
    steps:
    - name: Install packages
      run: choco install ninja -y
    - name: Add CL to PATH
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE:FILEPATH=toolchain-msvc.cmake -DARCH:STRING=i386 -DENABLE_ROSTESTS=1 -DENABLE_ROSAPPS=1 ${{github.workspace}}\src
    - name: Build
      working-directory: ${{github.workspace}}\build
      run: cmake --build . -- -k 0 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
