name: Build
on: [push, pull_request]

jobs:
  build-gcc-i386:
    name: GCC (i386)
    runs-on: ubuntu-latest
    steps:
      - name: Install RosBE
        run: |
          wget https://svn.reactos.org/storage/vperevertkin/rosbe-ci.tar.zst
          mkdir ${{github.workspace}}/rosbe
          tar -I zstd -xvf rosbe-ci.tar.zst --directory ${{github.workspace}}/rosbe
      - name: Install other packages
        run: sudo apt install ccache
      - uses: actions/checkout@v2
        with:
          path: src
      - name: Set up cache for ccache
        uses: actions/cache@v2
        with:
          path: ccache
          key: ccache-gcc-i386-${{github.sha}}
          restore-keys: |
            ccache-gcc-i386-
      - name: Set ccache settings
        run: |
          echo "::set-env name=CCACHE_BASEDIR::${{github.workspace}}"
          echo "::set-env name=CCACHE_DIR::${{github.workspace}}/ccache"
          echo "::set-env name=CCACHE_MAXSIZE::1G"
          echo "::set-env name=CCACHE_SLOPPINESS::time_macros"
      - name: Configure
        run: |
          mkdir build
          echo 'cd ${{github.workspace}}/build &&' > commands
          echo '${{github.workspace}}/src/configure.sh -DENABLE_CCACHE=1 -DENABLE_ROSTESTS=1 -DENABLE_ROSAPPS=1 -DUNATTENDED_BOOTCD=yes -DUNATTENDED_BOOTCD_DisableGeckoInst=yes' >> commands
          ${{github.workspace}}/rosbe/RosBE.sh < commands
      - name: Build
        run: |
          echo 'cd ${{github.workspace}}/build &&' > commands
          echo 'cmake --build .' >> commands
          ${{github.workspace}}/rosbe/RosBE.sh < commands
      - name: Generate ISOs
        run: |
          echo 'cd ${{github.workspace}}/build &&' > commands
          echo 'cmake --build . --target bootcd &&' >> commands
          echo 'cmake --build . --target livecd' >> commands
          ${{github.workspace}}/rosbe/RosBE.sh < 'commands'
      - name: Print ccache statistics
        run: ccache -s
      - name: Upload bootcd
        uses: actions/upload-artifact@v2
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/bootcd.iso
      - name: Upload livecd
        uses: actions/upload-artifact@v2
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/livecd.iso
      - name: Upload bootcdregtest
        # Works, but only to automate a test run (AppVeyor/GitHub)... (And will need to include Gecko !!?)
        if: false
        uses: actions/upload-artifact@v2
        with:
          name: reactos-gcc-i386-BcdRt-${{github.sha}}
          path: build/bootcdregtest.iso
      - name: Upload host-tools
        if: true
        uses: actions/upload-artifact@v2
        with:
          name: reactos-gcc-i386-HostT-${{github.sha}}
          path: build/host-tools/bin/*
      - name: Upload sdk/tools
        if: true
        uses: actions/upload-artifact@v2
        with:
          name: reactos-gcc-i386-SdkT-${{github.sha}}
          path: build/sdk/tools/*

  build-clang-cl-i386:
    # Useless to me, unless touching clang.
    if: false
    name: Clang-CL (i386)
    runs-on: windows-latest
    steps:
    - name: Install packages
      run: choco install ninja -y
    - name: Install Flex and Bison
      run: |
        curl -O https://svn.reactos.org/storage/vperevertkin/flexbison.7z
        7z x flexbison.7z -O${{github.workspace}}\bin
        echo "::add-path::${{github.workspace}}\bin"
        echo "::set-env name=BISON_PKGDATADIR::${{github.workspace}}\bin\share\bison"
        echo "::set-env name=M4::${{github.workspace}}\bin\m4.exe"
    - name: Add CL to PATH
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Configure
      run: |
        mkdir build
        cd build
        $env:PATH = "$env:PATH;$env:VCToolsInstallDir\..\..\Llvm\bin"
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE:FILEPATH=toolchain-msvc.cmake -DARCH:STRING=i386 -DENABLE_ROSTESTS=1 -DENABLE_ROSAPPS=1 -DUSE_CLANG_CL:BOOL=1 -DUNATTENDED_BOOTCD=yes -DUNATTENDED_BOOTCD_DisableGeckoInst=yes ${{github.workspace}}\src
    - name: Build
      working-directory: ${{github.workspace}}\build
      run: cmake --build .
    - name: Generate ISOs
      # CORE-17235: [clang-cl 10] bootcd and livecd fail while loading drivers
      if: false
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . --target bootcd
        cmake --build . --target livecd
        cmake --build . --target bootcdregtest
    - name: Upload bootcd
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-clang-cl-i386-${{github.sha}}
        path: build/bootcd.iso
    - name: Upload livecd
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-clang-cl-i386-${{github.sha}}
        path: build/livecd.iso
    - name: Upload bootcdregtest
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-clang-cl-i386-BcdRt-${{github.sha}}
        path: build/bootcdregtest.iso

  build-msvc-i386:
    if: false
    name: MSVC (i386)
    runs-on: windows-latest
    steps:
    - name: Install packages
      run: choco install ninja -y
    - name: Install Flex and Bison
      run: |
        curl -O https://svn.reactos.org/storage/vperevertkin/flexbison.7z
        7z x flexbison.7z -O${{github.workspace}}\bin
        echo "::add-path::${{github.workspace}}\bin"
        echo "::set-env name=BISON_PKGDATADIR::${{github.workspace}}\bin\share\bison"
        echo "::set-env name=M4::${{github.workspace}}\bin\m4.exe"
    - name: Add CL to PATH
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE:FILEPATH=toolchain-msvc.cmake -DARCH:STRING=i386 -DENABLE_ROSTESTS=1 -DENABLE_ROSAPPS=1 -DUNATTENDED_BOOTCD=yes -DUNATTENDED_BOOTCD_DisableGeckoInst=yes ${{github.workspace}}\src
    - name: Build
      working-directory: ${{github.workspace}}\build
      run: cmake --build .
    - name: Generate ISOs
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . --target bootcd
        cmake --build . --target livecd
    - name: Upload bootcd
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-i386-${{github.sha}}
        path: build/bootcd.iso
    - name: Upload livecd
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-i386-${{github.sha}}
        path: build/livecd.iso
    - name: Upload bootcdregtest
      # Works, but low value to me, as is. (And will need to include Gecko !!?)
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-i386-BcdRt-${{github.sha}}
        path: build/bootcdregtest.iso
    - name: Upload host-tools
      # CabMan, Spec2Def, WIdl, ...
      # Mais x64 :-<
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-i386-HostT-${{github.sha}}
        path: build/host-tools/bin/*
    - name: Upload sdk/tools
      # Rien d'utile. (Que wpp: .obj .lib.)
      # En particulier, Log2Lines est exclus avec msvc :-/
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-i386-SdkT-${{github.sha}}
        path: build/sdk/tools/*

  build-msvc-amd64:
    # Useless to me, unless touching x64.
    if: false
    name: MSVC (amd64)
    runs-on: windows-latest
    steps:
    - name: Install packages
      run: choco install ninja -y
    - name: Install Flex and Bison
      run: |
        curl -O https://svn.reactos.org/storage/vperevertkin/flexbison.7z
        7z x flexbison.7z -O${{github.workspace}}\bin
        echo "::add-path::${{github.workspace}}\bin"
        echo "::set-env name=BISON_PKGDATADIR::${{github.workspace}}\bin\share\bison"
        echo "::set-env name=M4::${{github.workspace}}\bin\m4.exe"
    - name: Add CL to PATH
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE:FILEPATH=toolchain-msvc.cmake -DARCH:STRING=amd64 -DENABLE_ROSTESTS=1 -DENABLE_ROSAPPS=1 -DUNATTENDED_BOOTCD=yes -DUNATTENDED_BOOTCD_DisableGeckoInst=yes ${{github.workspace}}\src
    - name: Build
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build .
    - name: Generate ISOs
      # bootcd and livecd crash QEMU-x64 0.10.5.
      if: false
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . --target bootcd
        cmake --build . --target livecd
        cmake --build . --target bootcdregtest
    - name: Upload bootcd
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-amd64-${{github.sha}}
        path: build/bootcd.iso
    - name: Upload livecd
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-amd64-${{github.sha}}
        path: build/livecd.iso
    - name: Upload bootcdregtest
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: reactos-msvc-amd64-BcdRt-${{github.sha}}
        path: build/bootcdregtest.iso
