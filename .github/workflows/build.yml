name: Build-SG
on: [push, pull_request]

jobs:
  build-gcc-i386:
    name: GCC (i386)
    runs-on: ubuntu-16.04
    # runs-on: ubuntu-18.04
    # runs-on: ubuntu-latest
    # runs-on: ubuntu-20.04
    steps:
      - name: Install RosBEBinFull (RosBE 2.1.2, +PCH)
        run: |
          wget -nv https://svn.reactos.org/amine/RosBEBinFull.tar.gz
          tar -xzf RosBEBinFull.tar.gz
          mv RosBEBinFull rosbe
      - name: Install other packages
        if: false
        run: sudo apt install ccache
      - uses: actions/checkout@v2
        with:
          path: src
      - name: Set up cache for ccache
        if: false
        uses: actions/cache@v1
        with:
          path: ccache
          key: ccache-gcc-i386-${{github.sha}}
          restore-keys: |
            ccache-gcc-i386-
      - name: Set ccache settings
        if: false
        run: |
          echo "::set-env name=CCACHE_BASEDIR::${{github.workspace}}"
          echo "::set-env name=CCACHE_DIR::${{github.workspace}}/ccache"
          echo "::set-env name=CCACHE_MAXSIZE::1G"
          echo "::set-env name=CCACHE_SLOPPINESS::time_macros"
#           echo 'cd ${{github.workspace}}/build && ${{github.workspace}}/src/configure.sh -DENABLE_CCACHE=1 -DENABLE_ROSTESTS=1' > commands
      - name: Configure
        run: |
          mkdir build
          echo 'cd ${{github.workspace}}/build && ${{github.workspace}}/src/configure.sh -DENABLE_ROSTESTS=1' > commands
          ${{github.workspace}}/rosbe/RosBE.sh < commands
      - name: Build
        run: |
          echo 'cd ${{github.workspace}}/build && cmake --build .' > commands
          ${{github.workspace}}/rosbe/RosBE.sh < commands
      - name: Generate ISOs
        run: |
          echo 'cd ${{github.workspace}}/build && cmake --build . --target bootcd && cmake --build . --target bootcdregtest && cmake --build . --target livecd' > commands
          ${{github.workspace}}/rosbe/RosBE.sh < 'commands'
      - name: Print ccache statistics
        if: false
        run: ccache -s
      - name: Upload bootcd
        uses: actions/upload-artifact@v1
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/bootcd.iso
      - name: Upload bootcdregtest
        uses: actions/upload-artifact@v1
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/bootcdregtest.iso
      - name: Upload livecd
        uses: actions/upload-artifact@v1
        with:
          name: reactos-gcc-i386-${{github.sha}}
          path: build/livecd.iso

  build-msvc-i386:
    name: MSVC (i386)
      # NT 10, VS 2017.
    runs-on: windows-2016
      # NT 10, VS 2019.
    # runs-on: windows-2019
    # runs-on: windows-latest
    steps:
    - name: Install packages
      run: choco install ninja -y
    - name: Install RosCMakeNinja (RosBE 2.1.x, +PCH)
      run: |
        curl -O https://svn.reactos.org/amine/RosCMakeNinja.zip
        7z x RosCMakeNinja.zip -o${{github.workspace}}\rosbe
        del ${{github.workspace}}\rosbe\bin\ninja.exe
        echo "::add-path::${{github.workspace}}\rosbe\bin"
    - name: Install Flex and Bison
      run: |
        curl -O https://svn.reactos.org/storage/vperevertkin/flexbison.7z
        7z x flexbison.7z -O${{github.workspace}}\bin
        echo "::add-path::${{github.workspace}}\bin"
        echo "::set-env name=BISON_PKGDATADIR::${{github.workspace}}\bin\share\bison"
        echo "::set-env name=M4::${{github.workspace}}\bin\m4.exe"
    - name: Add CL to PATH
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE:FILEPATH=toolchain-msvc.cmake -DARCH:STRING=i386 -DENABLE_ROSTESTS=1 ${{github.workspace}}\src
    - name: Build
      working-directory: ${{github.workspace}}\build
      run: cmake --build . 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
    - name: Generate ISOs
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . --target bootcd 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
        cmake --build . --target livecd 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
    - name: Upload bootcd
      uses: actions/upload-artifact@v1
      with:
        name: reactos-msvc-i386-${{github.sha}}
        path: build/bootcd.iso
    - name: Upload livecd
      uses: actions/upload-artifact@v1
      with:
        name: reactos-msvc-i386-${{github.sha}}
        path: build/livecd.iso

  build-msvc-amd64:
    name: MSVC (amd64)
      # NT 10, VS 2017.
    runs-on: windows-2016
      # NT 10, VS 2019.
    # runs-on: windows-2019
    # runs-on: windows-latest
    steps:
    - name: Install packages
      # HACK: remove all packages which contain gcc binary
      run: |
         choco install ninja -y
         choco uninstall mingw strawberryperl -y
    - name: Install RosCMakeNinja (RosBE 2.1.x, +PCH)
      run: |
        curl -O https://svn.reactos.org/amine/RosCMakeNinja.zip
        7z x RosCMakeNinja.zip -o${{github.workspace}}\rosbe
        del ${{github.workspace}}\rosbe\bin\ninja.exe
        echo "::add-path::${{github.workspace}}\rosbe\bin"
    - name: Install Flex and Bison
      run: |
        curl -O https://svn.reactos.org/storage/vperevertkin/flexbison.7z
        7z x flexbison.7z -O${{github.workspace}}\bin
        echo "::add-path::${{github.workspace}}\bin"
        echo "::set-env name=BISON_PKGDATADIR::${{github.workspace}}\bin\share\bison"
        echo "::set-env name=M4::${{github.workspace}}\bin\m4.exe"
    - name: Add CL to PATH
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
    - uses: actions/checkout@v2
      with:
        path: src
    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE:FILEPATH=toolchain-msvc.cmake -DARCH:STRING=amd64 -DENABLE_ROSTESTS=1 ${{github.workspace}}\src
    - name: Build
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
    - name: Generate ISOs
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . --target bootcd 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
        cmake --build . --target livecd 2>&1 | select-string -pattern "\[\d+\/\d+\] " -NotMatch | %{$_.Line}
    - name: Upload bootcd
      uses: actions/upload-artifact@v1
      with:
        name: reactos-msvc-amd64-${{github.sha}}
        path: build/bootcd.iso
    - name: Upload livecd
      uses: actions/upload-artifact@v1
      with:
        name: reactos-msvc-amd64-${{github.sha}}
        path: build/livecd.iso
